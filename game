#!/usr/bin/env ruby
# encoding: UTF-8

$LOAD_PATH.unshift File.join(%w(. lib))
require 'curses'
require 'logger'

require 'movable'
require 'window'

LOG = Logger.new('./debug.log')

class Scoreboard < Window
  def render
    [
      sprintf("  %-37d %37d", Game.score[:left], Game.score[:right])
    ]
  end
end

class Field < Window
  attr_accessor :lpaddle, :rpaddle, :ball

  def initialize(*args)
    super
    @default_tile = ' '
    @lpaddle = Paddle.new(6,4)
    @rpaddle = Paddle.new(73,14)
    @ball = Ball.new(40,12)
    reset
  end

  def step
    @ball.step
    @rpaddle.follow(@ball)
    #@lpaddle.follow(@ball)

    if collision?(@ball,@lpaddle)
      @ball.bounce_from(@lpaddle)
    elsif collision?(@ball,@rpaddle)
      @ball.bounce_from(@rpaddle)
    elsif @ball.x > 79
      Game.goal :left
    elsif @ball.x < 1
      Game.goal :right
    end
  end

  def reset
    @ball.x = 40
    @ball.y = 12
    @ball.speedx = rand(2) == 0 ? -45 : 45
    @ball.speedy = 0
  end

  def process_key(key)
    return :unprocessed if Game.paused?
    case key
    when Curses::Key::UP
      @lpaddle.up
    when Curses::Key::DOWN
      @lpaddle.down
    else
      LOG.debug "Field rejecting key #{key.inspect}"
      :unprocessed
    end
  end

  private

  def collision?(ball, paddle)
    bx = ball.x.to_i
    px = paddle.x.to_i

    bx == px# || bx == px-1
  end

  def render_tile(xpos, ypos)
    return lpaddle.render_tile if lpaddle && lpaddle.is_at?(xpos, ypos)
    return rpaddle.render_tile if rpaddle && rpaddle.is_at?(xpos, ypos)
    return ball.render_tile if ball && ball.is_at?(xpos, ypos)
    super
  end

end

class Status < Window

  def render
    [
      " " + Time.now.to_s,
      " FPS: #{ff Game.get_fps} , Frame length: #{ff Game.last_frame} ms   ",
      " score: #{Game.score.inspect}      ",
      " rpaddle y-speed: #{ff Game.field.rpaddle.speedy}     ",
      " ball speed: (x:#{ff Game.field.ball.speedx}|y:#{Game.field.ball.speedy})     ",
      #" Object count: #{ObjectSpace.count_objects}  ",
      " #{Game.paused? ? "PAUSED" : '        '}",
    ]
  end

  #floatformat
  def ff(float)
    return float.to_s unless float.is_a? Float
    sprintf "%.2f", float
  end
end

class Paddle
  include Movable

  def initialize(x, y)
    init_movable(x, y)
    @maxy = 22
    @miny = 2
  end

  def follow(ball)
    xdist = ball.x - self.x
    ydist = ball.y - self.y

    target = (ydist+(ball.speedy/20))+0.5
    acc = 0.2 + target.abs*0.2 + speedy.abs/10
    if target > 0 && speedy < 12
      self.speedy += acc
    elsif target < 0 && speedy > -12
      self.speedy -= acc
    end
    step
  end

  def is_at?(xpos, ypos)
    x = @x.to_i
    y = @y.to_i

    (y-1==ypos || y==ypos || y+1==ypos) && x==xpos
  end

  def render_tile
    ?▇
  end
end

class Ball
  include Movable

  def initialize(x, y)
    init_movable(x, y)
  end

  def render_tile
    ?☢
  end

  def step
    @speedy *= -1 if @y < 0 || @y > 25
    super
  end

  def bounce_from(paddle)
    dir = speedx==0 ? 1 : speedx/speedx.abs
    case self.y.to_i
    when paddle.y.to_i-1
      LOG.debug 'top hit'
      self.speedy -= 5
    when paddle.y.to_i
      LOG.debug 'middle hit'
      self.speedx += 5*dir if speedx.abs < 100
    when paddle.y.to_i+1
      LOG.debug 'bottom hit'
      self.speedy += 5
    else
      LOG.debug 'whatever'
      return
    end
      self.speedy += rand(5)-2


    #reflect ball
    self.speedx *= -1
  end
end

module Game
  extend self

  attr_reader :field, :score
  @fps_capping = true
  @frame_took = 0

  def start
    init_curses
    run
  end

  def last_frame
    @frame_took * 1000
  end

  def init_curses
    Curses.curs_set(0)
    Curses.stdscr.keypad = true
    Curses.stdscr.nodelay = true
    Curses.noecho
    Curses.nonl
    Curses.init_screen
    Curses.refresh
  end

  def run
    @windows = []

    @windows << @field = Field.new(80,25)
    @windows << Scoreboard.new(80,1, 27)
    @windows << Status.new(80,6, 30)

    @start_time = @last_fps_time = Time.now
    @frames = 0
    @frames_at_last_fps_calculation = 0

    @score = {}
    @score[:right] = @score[:left] = 0

    while(true) do
      max_frame = fps_capping? ? 0.02 : 0.00
      frame_start = Time.now
      draw_stuff
      process_game unless paused?
      process_keyboard
      Curses.refresh
      #GC.start
      @frames += 1
      @frame_took = Time.now - frame_start
      sleep max_frame - @frame_took if @frame_took < max_frame
    end
  end

  def toggle_pause
    @paused = !@paused
  end

  def paused?
    !!@paused
  end

  def toggle_fps_capping
    @fps_capping = !@fps_capping
    LOG.debug "#{@fps_capping}"
  end

  def fps_capping?
    !!@fps_capping
  end

  def goal(who)
    @score[who] += 1
    @field.reset
  end

  def draw_stuff
    @windows.each {|w| w.draw }
  end

  def process_game
    @field.step
  end

  def process_keyboard
    return if (c = Curses.getch) == nil
    return if @field.process_key(c) != :unprocessed
    case c
    when 'q'
      exit(1)
    when 'u'
      LOG.debug 'foooo'
      Game.toggle_fps_capping
    when 'p'
      Game.toggle_pause
    when 27
      LOG.debug "esc pressed"
    else
      LOG.debug "key pressed: #{c.inspect}"
    end
  end

  def get_fps
    calculate_fps if (Time.now - @last_fps_time) > 0.2
    @fps
  end

  def calculate_fps
    @fps = (@frames - @frames_at_last_fps_calculation) / (Time.now - @last_fps_time)
    @last_fps_time = Time.now
    @frames_at_last_fps_calculation = @frames
  end
end


begin
  Game.start
ensure
  LOG.debug 'stopping game'
  Curses.close_screen
end
